{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FastAPI Framework","text":"<p>A FastAPI Framework for things like <code>Database</code>, <code>Redis</code>, <code>Logging</code>, <code>JWT Authentication</code>, <code>Rate Limits</code> and <code>Sessions</code> </p>"},{"location":"#install","title":"Install","text":"<p>You can install this Library with:</p> <pre><code>pip install fastapi-framework\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p>For the Documentation click here</p>"},{"location":"#features","title":"Features","text":"<ul> <li>\u2705 Database</li> <li>\u2705 Redis</li> <li>\u2705 Redis Publish/Subscribe</li> <li>\u2705 FastAPI JWT</li> <li>\u274c FastAPI Permission System (for routes)</li> <li>\u2705 Rate Limits</li> <li>\u2705 Config Parser</li> <li>\u2705 Session System</li> </ul>"},{"location":"#license","title":"License","text":"<p>This Project is Licensed under the MIT License</p>"},{"location":"environment/","title":"Environment","text":"<p>There are some Environment Variables you should set if you want to use a Database or Redis.</p>"},{"location":"environment/#database","title":"Database","text":"Name Default Description <code>DB_DRIVER</code> <code>postgresql+asyncpg</code> The Database Driver to use <code>DB_HOST</code> <code>localhost</code> Host of the DB Server <code>DB_PORT</code> <code>5432</code> Port of the Database <code>DB_USERNAME</code> <code>postgres</code> Database Username <code>DB_PASSWORD</code> <code></code> Database Password <code>DB_DATABASE</code> Name of the Database <code>DB_POOL_SIZE</code> <code>20</code> Database Connection Pool Size <code>DB_MAX_OVERFLOW</code> <code>20</code> Max Pool Size"},{"location":"environment/#redis","title":"Redis","text":"Name Default Description <code>REDIS_HOST</code> <code>localhost</code> Host of the Redis Server <code>REDIS_PORT</code> <code>63792</code> Port of the Redis Server"},{"location":"environment/#jwt","title":"JWT","text":"Name Default Description <code>JWT_SECRET_KEY</code> Secret Key for JWT Authentication <code>JWT_ALGORITHM</code> <code>HS256</code> The Algorithm for JWT <code>JWT_ACCESS_TOKEN_EXPIRE_MINUTES</code> <code>30</code> Expire time for the Access Token <code>JWT_REFRESH_TOKEN_EXPIRE_MINUTES</code> <code>360</code> Expire time for the Refresh Token"},{"location":"environment/#modules","title":"Modules","text":"Name Default Description <code>DISABLED_MODULES</code> <code></code> Name of Modules too disable The names should seperated by <code>,</code>,<code>,</code> or <code>;</code>. All Module names are: <ul> <li><code>database</code></li> <li><code>redis</code></li> <li><code>jwt_auth</code></li> <li><code>logger</code></li> <li><code>rate_limit</code></li> </ul>"},{"location":"environment/#other","title":"Other","text":"Name Default Description <code>LOG_LEVEL</code> <code>INFO</code> Log Level e.g. <code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code> or <code>ERROR</code>"},{"location":"config/","title":"Config","text":"<p>The <code>Config</code> Module is a simple \"Config Parser\".</p>"},{"location":"config/#example","title":"Example","text":"<p><pre><code>from fastapi_framework import Config, ConfigField\n\n\nclass MyConfig(Config):\n    name: str = ConfigField()\n    version: str = ConfigField(\"v1.0\")\n    timestamp: int = ConfigField(name=\"_timestamp\")\n\n\nprint(MyConfig.name)\nprint(MyConfig.version)\nprint(MyConfig.timestamp)\n</code></pre> Content of <code>config.yaml</code>: <pre><code>name: My cool Name\n_timestamp: 123456789\n</code></pre> Result: <pre><code>My cool Name\nv1\n123456789\n</code></pre> As you can see if the <code>version</code> Config isn't set it will have the default value!</p> <p>You can use another Key for the Config as the Variables name by setting <code>name</code>  to the Name</p> <p>Tip</p> <p>Config Fields can have a Type Hint and will get converted to this type</p> <p>Tip</p> <p>You can define <code>CONFIG_PATH</code> to set the Path of the File</p> <p>Tip</p> <p>You can define <code>CONFIG_TYPE</code> to set the File Type e.g. <code>yaml</code>, <code>json</code> and <code>toml</code></p>"},{"location":"database/","title":"Database","text":"<p>The Database Module is a Wrapper with asnyc Support forSQLAlchemy  .</p> <p>Its based on PyDrocsid's Database Wrapper.</p>"},{"location":"database/example/","title":"Example","text":"<pre><code>from fastapi_framework.database import db, select\nfrom fastapi import FastAPI, HTTPException\nfrom sqlalchemy import Integer, Column, String\nfrom typing import Union\n\napp = FastAPI()\n\n\nclass User(db.Base):\n    __tablename__ = \"users\"\n    id: Union[Column, int] = Column(Integer, primary_key=True)\n    name: Union[Column, str] = Column(String(255))\n\n    @staticmethod\n    async def create(name: str) -&gt; \"User\":\n        row = User(name=name)\n        await db.add(row)\n        return row\n\n\n@app.get(\"/users\")\nasync def get_users():\n    return await db.all(select(User))\n\n\n@app.get(\"/users/{name}\")\nasync def get_users(name: str):\n    return await db.all(select(User).filter_by(name=name))\n\n\n@app.post(\"/users/{name}\")\nasync def add_user(name: str) -&gt; User:\n    if await db.exists(select(User).filter_by(name=name)):\n        raise HTTPException(409, \"Username already used\")\n    user = await User.create(name)\n    await db.commit()\n    return user\n</code></pre>"},{"location":"database/insert_delete_modify/","title":"Insert, Delete and Modify Data","text":""},{"location":"database/insert_delete_modify/#insert-data","title":"Insert Data","text":"<p>With <code>db.add</code> you can insert Date into the Database</p> <pre><code>from fastapi_framework.database import db\n\n\nclass MyModel(db.Base):\n    # The Model Code\n    pass\n\n\nasync def main():\n    obj: MyModel = MyModel(x=1)\n    await db.add(obj)\n</code></pre>"},{"location":"database/insert_delete_modify/#delete-data","title":"Delete Data","text":"<p>With <code>db.delete</code> you can delete Data from your Database</p> <pre><code>from fastapi_framework.database import db, select\n\n\nclass MyModel(db.Base):\n    # The Model Code\n    pass\n\n\nasync def main():\n    model: MyModel = await select(MyModel).filter_by(x=1)\n    await db.delete(model)\n</code></pre>"},{"location":"database/insert_delete_modify/#modify-data","title":"Modify Data","text":"<p>You can modify Data in your Database by change the Model Class Attribute</p> <pre><code>from fastapi_framework.database import db, select\n\n\nclass MyModel(db.Base):\n    # The Model Code\n    pass\n\n\nasync def main():\n    model: MyModel = await select(MyModel).filter_by(x=1)\n    model.x = 1\n</code></pre>"},{"location":"database/models/","title":"Models","text":"<p>The Tutorial for SQLAlchemy Models can befound here.</p> <p>A Model class should inherit from <code>fastapi_framework.db.Base</code></p> <p>To create the Models Async in your Code you could  add this async function to your models:</p> <pre><code>from fastapi_framework import db\n\n\nclass MyModel(db.Base):\n    # your model code\n    @staticmethod\n    async def create(param: int, param2: str) -&gt; \"MyModel\":\n        row = MyModel(param=param, param2=param2)\n        await db.add(row)\n        return row\n</code></pre>"},{"location":"database/query/","title":"Query","text":"<p>Function for Database Query are  <pre><code>from fastapi_framework.database import select, filter_by\n</code></pre></p>"},{"location":"database/query/#select","title":"Select","text":"<pre><code>from fastapi_framework.database import db, select\n\n\nclass MyModel(db.Base):\n    # The Model Code\n    pass\n\n\nasync def main():\n    query = select(MyModel)  # Selects all from the MyModel table\n</code></pre>"},{"location":"database/query/#filter-by","title":"Filter By","text":"<p><code>filter_by(Model, criteria)</code> is a shortcut for <code>select(Model).filer_by(criteria)</code></p> <pre><code>from fastapi_framework.database import db, select, filter_by\n\n\nclass MyModel(db.Base):\n    # The Model Code\n    pass\n\n\nasync def main():\n    query = filter_by(MyModel, id=1)  # Selects all from the MyModel table where id is 1\n    # Same here:\n    query = select(MyModel).filter_by(id=1)\n</code></pre>"},{"location":"database/query/#execute-querys","title":"Execute Querys","text":""},{"location":"database/query/#get-first-element","title":"Get First Element","text":"<p>Returns the first Result for the Query. Could be <code>None</code></p> <pre><code>from fastapi_framework.database import db, select\n\n\nclass MyModel(db.Base):\n    # The Model Code\n    pass\n\n\nasync def main():\n    query = select(MyModel)  # Your Query\n    result: MyModel = await db.first(query)\n</code></pre>"},{"location":"database/query/#get-all-element","title":"Get All Element","text":"<p>Returns all results for the query. Could be <code>[]</code></p> <pre><code>from fastapi_framework.database import db, select\n\n\nclass MyModel(db.Base):\n    # The Model Code\n    pass\n\n\nasync def main():\n    query = select(MyModel)  # Your Query\n    result: list[MyModel] = await db.all(query)\n</code></pre>"},{"location":"database/query/#check-exists","title":"Check Exists","text":"<p>Checks if data for this query exists</p> <pre><code>from fastapi_framework.database import db, select\n\n\nclass MyModel(db.Base):\n    # The Model Code\n    pass\n\n\nasync def main():\n    query = select(MyModel)  # Your Query\n    exists: bool = await db.exists(query)\n</code></pre>"},{"location":"database/query/#count-results","title":"Count Results","text":"<p>Returns count of matching rows for the query</p> <pre><code>from fastapi_framework.database import db, select\n\n\nclass MyModel(db.Base):\n    # The Model Code\n    pass\n\n\nasync def main():\n    query = select(MyModel)  # Your Query\n    count: int = await db.count(query)\n</code></pre>"},{"location":"in_memory_backends/api/","title":"Introduction","text":"<p>The In Memory Backend API is the interface that can be used for Redis but also for the Custom In Memory Backend.</p>"},{"location":"in_memory_backends/api/delete_exists/","title":"Delete and Exists","text":""},{"location":"in_memory_backends/api/delete_exists/#delete","title":"Delete","text":"<p>You can Delete Keys with <pre><code>await redis.delete(\"my_key\")\n</code></pre></p>"},{"location":"in_memory_backends/api/delete_exists/#exists","title":"Exists","text":"<p>You can check if a Key exists <pre><code>await redis.exists(\"this_exists\")  # True\nawait redis.exists(\"this_dont_exists\")  # False\n</code></pre></p>"},{"location":"in_memory_backends/api/expires/","title":"Expires","text":""},{"location":"in_memory_backends/api/expires/#set-expire-time","title":"Set Expire Time","text":"<p>You can set the Expire time in Seconds or Milliseconds with <pre><code>await redis.expire(\"my_key\", 5) # 5 Seconds\nawait redis.pexpire(\"my_key\", 1200) # 1200 Milliseconds =&gt; 1.2 Seconds\n</code></pre></p>"},{"location":"in_memory_backends/api/expires/#get-expire-time","title":"Get Expire Time","text":"<p>You can get the Expire tim of a Key with <pre><code>await redis.ttl(\"my_key\")  # 5\nawait redis.pttl(\"my_key\")  # 1200\nawait redis.pttl(\"this_key_dont_exists\")  # -2\nawait redis.pttl(\"expired_key\")  # -1\n</code></pre> - TTL Returns the Seconds - PTTL Returns the Milliseconds - If the Key doesn't exists it will return -2 - If the Key is expired it will return -1</p>"},{"location":"in_memory_backends/api/increase_decrease/","title":"Increase and Decrease","text":"<p>You can Increase and Decrease Int Values. <pre><code>await redis.incr(\"my_key\") # my_key + 1\n</code></pre> <pre><code>await redis.decr(\"my_key\") # my_key - 1\n</code></pre> The Functions will raise a <code>ValueError</code> if the Key is not an Int.</p> <p>If the Key doesn't exists it will set the Key to <code>1</code> or <code>-1</code></p>"},{"location":"in_memory_backends/api/set_get/","title":"Set and Get","text":"<p>You can set Values with <pre><code>await redis.set(\"my_key\", \"a value\")\n</code></pre> and get them with <pre><code>print(await redis.get(\"my_key\"))\n#  a value\n</code></pre> <code>GET</code> will return <code>None</code> if the key doesn't exist or is expired.</p> <p>The <code>SET</code> Command has some other Arguments <pre><code>expire_seconds = 5\nexpire_milliseconds = 555\nawait redis.set(key=\"my_key\", value=\"a value\", expire=expire_seconds, pexpire=expire_milliseconds, exists=RAMBackend.SET_IF_EXIST)\n</code></pre> - key: The Redis Key - value: The Value - expire: The Expire time in Seconds - pexpire: The Expire time in Milliseconds - exists: Exist Conditions</p>"},{"location":"in_memory_backends/api/sets/","title":"Sets","text":""},{"location":"in_memory_backends/api/sets/#smembers","title":"smembers","text":"<p>With <code>smembers</code> you can get all Members of an Set. <pre><code>await redis.smembers(\"my_set\")  # {\"item1\", \"item2\"}\n</code></pre></p>"},{"location":"in_memory_backends/api/sets/#sadd","title":"sadd","text":"<p>With <code>sadd</code> you can add an Item to a Set. <pre><code>await redis.sadd(\"my_set\", \"item1\")\n</code></pre></p>"},{"location":"in_memory_backends/api/sets/#srem","title":"srem","text":"<p>With <code>srem</code> you can remove an Item from a Set. <pre><code>await redis.srem(\"my_set\", \"item1\")\n</code></pre></p>"},{"location":"in_memory_backends/in_memory_backend/","title":"In Memory Backend","text":"<p>The In Memory Backend is a Redis replacement written in python.</p> <p>It is comparatively slow but if you don't want to have a Redis server, you can use it.</p> <p>To use the In Memory Backend you only have to disable the <code>redis</code> Module.</p>"},{"location":"in_memory_backends/redis/","title":"Introduction","text":"<p>This Framework uses Aioredis for Redis.</p>"},{"location":"in_memory_backends/redis/connection/","title":"Redis Connection","text":"<p>You have to init the redis connection with <code>await redis_dependency.init()</code>.</p> <p>Now you can use it as FastAPI Dependency.</p> <pre><code>from aioredis import Redis\nfrom fastapi_framework import redis_dependency\nfrom fastapi import FastAPI, Depends\n\napp = FastAPI()\n\n@app.on_event(\"startup\")\nasync def on_startup():\n    await redis_dependency.init()\n\n\n@app.get(\"/set/{key}/{value}\")\nasync def test(key: str, value: str, redis: Redis = Depends(redis_dependency)):\n    await redis.set(key, value)\n    return \"Done\"\n</code></pre>"},{"location":"jwt/","title":"JWT","text":"<p>The JWT Module is bases on PyJWT.</p>"},{"location":"jwt/example/","title":"Example","text":"<p>This is a JWT Login/Logout Example with Refresh Tokens.</p> <p>In this example we're using a Fake DB!</p> <pre><code>from typing import Dict, Union\n\nfrom aioredis import Redis\nfrom fastapi import FastAPI, Depends, HTTPException\n\nfrom fastapi_framework import (\n    redis_dependency,\n    get_data,\n    pwd_context,\n    invalidate_refresh_token,\n    check_refresh_token,\n    get_token,\n    generate_tokens,\n)\n\napp = FastAPI()\n\nfake_user_db: Dict[int, Dict[str, str]] = {\n    0: {\n        \"id\": \"0\",\n        \"username\": \"test\",\n        \"password\": \"$2b$12$vywwXgt8aHzb8PGhTvkZB.y20PzMfBxPr2i9ljr8QFUY6pe7DGWtG\",  # Password is '123'\n    },\n    1: {\n        \"id\": \"1\",\n        \"username\": \"admin\",\n        \"password\": \"$2b$12$Uelb/O331cMgXgzdWo6mTO6nM1KS4fULNPzv.lBbEl4QCFQRjNzAi\",  # Password is 'admin'\n    },\n}\n\n\n@app.on_event(\"startup\")\nasync def on_startup():\n    await redis_dependency.init()\n\n\n@app.get(\"/token\")\nasync def token_route(username: str, password: str, redis: Redis = Depends(redis_dependency)):\n    user: Union[Dict[str, str], None] = None\n    for user_db in fake_user_db.values():\n        if user_db[\"username\"] == username:\n            user = user_db.copy()\n            break\n    if user is None or not pwd_context.verify(password, user[\"password\"]):\n        raise HTTPException(401, detail=\"Username or Password is wrong\")\n    return await generate_tokens({\"user\": {\"id\": user[\"id\"], \"username\": user[\"username\"]}}, int(user[\"id\"]), redis)\n\n\n@app.get(\"/refresh\")\nasync def refresh_route(refresh_token: str, redis: Redis = Depends(redis_dependency)):\n    data: Dict = {}\n    if not await check_refresh_token(refresh_token, redis):\n        raise HTTPException(401, \"Refresh Token Invalid\")\n    try:\n        data = await get_data(refresh_token)\n    except HTTPException as e:\n        if e.detail == \"Token is expired\":\n            await invalidate_refresh_token(refresh_token, redis)\n            raise e\n    user_id = int(data[\"user_id\"])\n    user = fake_user_db[user_id]\n    await invalidate_refresh_token(refresh_token, redis)\n    return await generate_tokens({\"user\": {\"id\": user[\"id\"], \"username\": user[\"username\"]}}, int(user[\"id\"]), redis)\n\n\n@app.get(\"/logout\")\nasync def logout_route(refresh_token: str, redis: Redis = Depends(redis_dependency), _=Depends(get_token)):\n    await invalidate_refresh_token(refresh_token, redis)\n\n\n@app.get(\"/secret\")\nasync def secured_route(data: Dict = Depends(get_data)):\n    return f'Hello {data[\"user\"][\"username\"]}!'\n</code></pre>"},{"location":"jwt/jwt_tokens/","title":"JWT Tokens","text":"<p>There are two types of Tokens: - Access Token - Refresh Token</p>"},{"location":"jwt/jwt_tokens/#access-token","title":"Access Token","text":"<p>This token saves Data like <code>User ID</code>, <code>Username</code> and <code>Permission</code>. The User can't modify this without the <code>JWT_SECRET_KEY</code>. The Access Token expires after a short time</p>"},{"location":"jwt/jwt_tokens/#refresh-token","title":"Refresh Token","text":"<p>This Token has a UUID as Data. With this Token you can Refresh your Tokens and get new Tokens. The Refresh Token expires after a long time. It will get Cached in Redis so if you delete it from Redis the Refresh Token is invalid, and the User have to log in again</p>"},{"location":"jwt/jwt_tokens/#implementation","title":"Implementation","text":""},{"location":"jwt/jwt_tokens/#access-token_1","title":"Access Token","text":"<pre><code>from fastapi_framework.jwt_auth import create_access_token\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/jwt/access_token\")\nasync def get_access_token():\n    return await create_access_token(\n        {\n            \"user\": {\n                \"id\": 5,\n                \"username\": \"test\",\n                \"admin\": True,\n            }\n        }\n    )\n</code></pre> <p>Now you can test the Endpoint, and you'll get a JWT Access Token. To Debug JWT Tokens you can use jwt.io</p> <p></p>"},{"location":"jwt/jwt_tokens/#refresh-tokens","title":"Refresh Tokens","text":"<pre><code>from aioredis import Redis\n\nfrom fastapi_framework import redis_dependency\nfrom fastapi_framework.jwt_auth import create_refresh_token\nfrom fastapi import FastAPI, Depends\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\nasync def on_startup():\n    await redis_dependency.init()\n\n\n@app.get(\"/jwt/refresh_token\")\nasync def get_refresh_token(redis: Redis = Depends(redis_dependency)):\n    return await create_refresh_token(5, redis)\n</code></pre> <p>Now you can test the Endpoint, and you'll get a JWT Refresh Token. The Refresh Token should be in the Redis Cache in the Set <code>refresh_tokens</code></p> <p>You can check it with the Redis Command <code>smembers refresh_tokens</code></p> <pre><code>localhost:63792&gt; smembers refresh_tokens\n1) \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjo1LCJleHAiOjE2MjQ3OTg2MTN9.YVjN2ElK85Mjq9FL0fteZNGpsag78dm2g2EH9gsXsLE\"\nlocalhost:63792&gt;\n</code></pre>"},{"location":"jwt/jwt_tokens/#both","title":"Both","text":"<p>There is a shorter Way if you want to generate both Tokens e.g. for Login.</p> <pre><code>from aioredis import Redis\n\nfrom fastapi_framework import redis_dependency\nfrom fastapi_framework.jwt_auth import generate_tokens\nfrom fastapi import FastAPI, Depends\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\nasync def on_startup():\n    await redis_dependency.init()\n\n\n@app.get(\"/jwt/\")\nasync def get_tokens(redis: Redis = Depends(redis_dependency)):\n    return await generate_tokens(\n        {\n            \"user\": {\n                \"id\": 5,\n                \"username\": \"test\",\n                \"admin\": True,\n            }\n        },\n        5,\n        redis,\n    )\n</code></pre> <p>You'll get a Dict with Data like <pre><code>{\n  \"access_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjp7ImlkIjo1LCJ1c2VybmFtZSI6InRlc3QiLCJhZG1pbiI6dHJ1ZX0sImV4cCI6MTYyNDc4NjMwOH0.-7ZdW06DguPb5LMjRym7fDLIUoJeBCa1CohTUNPibpE\",\n  \"refresh_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjo1LCJleHAiOjE2MjQ3OTg5MDh9.vKTwD-pA2S63MPQ3g42a-wIxl7-QcUzSjwtRXI_X_wE\",\n  \"token_type\": \"bearer\"\n}\n</code></pre></p>"},{"location":"jwt/jwt_tokens/#logout","title":"Logout","text":"<p>To Logout a use you should invalidate the Refresh Token <pre><code>from aioredis import Redis\n\nfrom fastapi_framework import redis_dependency\nfrom fastapi_framework.jwt_auth import invalidate_refresh_token\nfrom fastapi import FastAPI, Depends\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\nasync def on_startup():\n    await redis_dependency.init()\n\n\n@app.get(\"/logout/\")\nasync def logout(refresh_token: str, redis: Redis = Depends(redis_dependency)):\n    await invalidate_refresh_token(refresh_token, redis)\n    return None\n</code></pre></p> <p>Now you can check out the <code>refresh_tokens</code> Set in Redis. The Refresh Token should be deleted now.</p> <pre><code>localhost:63792&gt; smembers refresh_tokens\n1) \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjo1LCJleHAiOjE2MjQ3OTg5MDh9.vKTwD-pA2S63MPQ3g42a-wIxl7-QcUzSjwtRXI_X_wE\"\nlocalhost:63792&gt;\n\n# After the Logout\n\nlocalhost:63792&gt; smembers refresh_tokens\n(empty list or set)\nlocalhost:63792&gt;\n</code></pre>"},{"location":"jwt/jwt_tokens/#check-refresh-token","title":"Check Refresh Token","text":"<p>In the Refresh Route you have to check if the Token is in the Redis Cache</p> <pre><code>from aioredis import Redis\n\nfrom fastapi_framework import redis_dependency\nfrom fastapi_framework.jwt_auth import check_refresh_token\nfrom fastapi import FastAPI, Depends\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\nasync def on_startup():\n    await redis_dependency.init()\n\n\n@app.get(\"/check_token/\")\nasync def check_token(refresh_token: str, redis: Redis = Depends(redis_dependency)):\n    return await check_refresh_token(refresh_token, redis)\n</code></pre>"},{"location":"jwt/jwt_tokens/#get-users-token","title":"Get Users Token","text":"<p>If you want to get the Access Token from the User you can do that with the FastAPI Dependency <code>fastapi_framework.get_token</code>.</p> <pre><code>from fastapi import FastAPI, Depends\n\nfrom fastapi_framework.jwt_auth import get_token\n\napp = FastAPI()\n\n\n@app.get(\"/get_token/\")\nasync def check_token(token: str = Depends(get_token)):\n    return token\n</code></pre> <p>Note: To implement the  Authentication in the Client send a <code>Authorization</code> Header with <code>Bearer &lt;jwt-access-token-here&gt;</code></p>"},{"location":"jwt/jwt_tokens/#get-jwt-tokens-data-as-dependency","title":"Get JWT Tokens Data (as Dependency)","text":"<p>To get the Data from the JWT Token you can use the Dependency <pre><code>from typing import Dict\n\nfrom fastapi import FastAPI, Depends\n\nfrom fastapi_framework.jwt_auth import get_data\n\napp = FastAPI()\n\n\n@app.get(\"/get_data/\")\nasync def get_data(data: Dict = Depends(get_data)):\n    return data\n</code></pre></p>"},{"location":"jwt/jwt_tokens/#get-jwt-token-data-with-token","title":"Get JWT Token Data (with Token)","text":"<p>To get Tokens Data without the Dependency you can use the same function</p> <pre><code>from fastapi import FastAPI\n\nfrom fastapi_framework.jwt_auth import get_data\n\napp = FastAPI()\n\n\n@app.get(\"/get_data/\")\nasync def get_data(token: str):\n    return await get_data(token)\n</code></pre>"},{"location":"rate_limit/","title":"Rate Limit","text":"<p>This module can be used to Limit Requests to Specific Routes like:</p> <ul> <li>A Useraccount can access <code>GET /api/v1/user</code> only 10 times per minute</li> </ul>"},{"location":"rate_limit/example/","title":"Example","text":""},{"location":"rate_limit/example/#example-with-jwt","title":"Example with JWT","text":"<pre><code>from fastapi import FastAPI, Depends\n\n\nfrom fastapi_framework import (\n    redis_dependency,\n    RateLimiter,\n    RateLimitManager,\n    create_access_token,\n    get_uuid_user_id,\n    get_data,\n    RateLimitTime,\n)\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\nasync def on_startup():\n    await redis_dependency.init()\n    await RateLimitManager.init(await redis_dependency(), get_uuid=get_uuid_user_id)\n\n\n@app.get(\"/login\")\nasync def login_route(user_id: int):\n    return await create_access_token({\"user_id\": user_id})\n\n\n@app.get(\"/limited\", dependencies=[Depends(RateLimiter(2, RateLimitTime(seconds=10))), Depends(get_data)])\nasync def limited_route():\n    return f\"Got it\"\n</code></pre>"},{"location":"rate_limit/example/#example-without-jwt","title":"Example without JWT","text":"<pre><code>from fastapi import FastAPI, Depends\n\n\nfrom fastapi_framework import (\n    redis_dependency,\n    RateLimiter,\n    RateLimitManager,\n    RateLimitTime\n)\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\nasync def on_startup():\n    await redis_dependency.init()\n    await RateLimitManager.init(await redis_dependency())\n\n\n@app.get(\"/limited\", dependencies=[Depends(RateLimiter(2, RateLimitTime(seconds=10)))])\nasync def limited_route():\n    return f\"Got it\"\n</code></pre>"},{"location":"rate_limit/rate_limit_manager/","title":"Rate Limit Manager","text":"<p>To use the Raid Limit Feature you have to initialise the Rate Limit Manager. <pre><code>from fastapi_framework import RateLimitManager, redis_dependency\nawait redis_dependency.init()\nawait RateLimitManager.init(await redis_dependency())\n</code></pre> You can set</p> <ul> <li><code>get_uuid</code></li> <li><code>callback</code></li> </ul>"},{"location":"rate_limit/rate_limit_manager/#get_uuid-setting","title":"<code>get_uuid</code> Setting","text":"<p>Callback function that returns a UUID used for Identification.</p> <p>Example: <pre><code>from fastapi import Request\nasync def default_get_uuid(request: Request) -&gt; str:\n    \"\"\"Default getter for UUID working with Users IP\"\"\"\n    return f\"{request.client.host}\"\n</code></pre></p>"},{"location":"rate_limit/rate_limit_manager/#callback","title":"<code>callback</code>","text":"<p>Callback function that will be called when a User gets Raid Limited and tries it again.</p> <p>Example: <pre><code>from fastapi import HTTPException\nfrom typing import Dict\nasync def default_callback(headers: Dict):\n    \"\"\"Default Error Callback when get Raid Limited\"\"\"\n    raise HTTPException(429, detail=\"Too Many Requests\", headers=headers)\n</code></pre> You should return the Headers to the users</p>"},{"location":"session/","title":"Session","text":"<p>The Sessions Feature is a way to store use-specific Data on the Server.</p>"},{"location":"session/callbacks-middleware/","title":"Custom Callbacks and Middleware","text":""},{"location":"session/callbacks-middleware/#session_id_callback","title":"<code>session_id_callback</code>","text":"<p>This callback is used to fetch the session id from the user.</p>"},{"location":"session/callbacks-middleware/#function-signature","title":"Function Signature","text":"<p><pre><code>from fastapi.requests import Request\n\nasync def session_id_callback(request: Request) -&gt; None:\n    pass\n</code></pre> or <pre><code>from fastapi.requests import Request\n\ndef session_id_callback(request: Request) -&gt; None:\n    pass\n</code></pre></p>"},{"location":"session/callbacks-middleware/#type","title":"Type","text":"<pre><code>from typing import Union, Callable, Coroutine\nfrom fastapi.requests import Request\n\nsession_id_callback: Union[Callable[[Request], None], Callable[[Request], Coroutine]]\n</code></pre>"},{"location":"session/callbacks-middleware/#standard-implementation","title":"Standard Implementation","text":"<pre><code>from fastapi.requests import Request\n\nasync def fetch_session_id(request: Request) -&gt; None:\n    if not hasattr(request.state, \"session_id\"):\n        request.state.session_id = request.cookies.get(\"SESSION_ID\")\n</code></pre> <p>Important</p> <p>Make sure that only the <code>Make sure that only the \"test\" part is changed.</code> part is changed.</p>"},{"location":"session/callbacks-middleware/#generate_session_id_callback","title":"<code>generate_session_id_callback</code>","text":"<p>This callback is used to generate a new session id.</p>"},{"location":"session/callbacks-middleware/#function-signature_1","title":"Function Signature","text":"<p><pre><code>async def generate_session_id() -&gt; str:\n    pass\n</code></pre> or <pre><code>def generate_session_id() -&gt; str:\n    pass\n</code></pre></p>"},{"location":"session/callbacks-middleware/#type_1","title":"Type","text":"<pre><code>from typing import Union, Callable, Coroutine\n\ngenerate_session_id_callback: Union[Callable[[], str], Callable[[], Coroutine]]\n</code></pre>"},{"location":"session/callbacks-middleware/#standard-implementation_1","title":"Standard Implementation","text":"<pre><code>import random\nimport string\n\nasync def generate_session_id() -&gt; str:\n    return \"\".join(random.choices(string.ascii_letters + string.digits, k=100))\n</code></pre> <p>Note</p> <p>The Session ID Entropy should be <code>64 Bits</code> or bigger.</p> <p>Source: OWASP Cheatsheet</p>"},{"location":"session/callbacks-middleware/#middleware","title":"Middleware","text":""},{"location":"session/callbacks-middleware/#function-signature_2","title":"Function Signature","text":"<pre><code>from fastapi.requests import Request\nfrom fastapi.responses import Response\nfrom starlette.middleware.base import RequestResponseEndpoint\n\nasync def session_middleware(\n    session_system: \"Session\", request: Request, call_next: RequestResponseEndpoint\n) -&gt; Response:\n    pass\n</code></pre>"},{"location":"session/callbacks-middleware/#type_2","title":"Type","text":"<pre><code>from typing import Union, Callable, Coroutine\nfrom fastapi.requests import Request\nfrom fastapi.responses import Response\nfrom starlette.middleware.base import RequestResponseEndpoint\n\nmiddleware: Union[\n            Callable[[\"Session\", Request, RequestResponseEndpoint], Response],\n            Callable[[\"Session\", Request, RequestResponseEndpoint], Coroutine],\n        ]\n</code></pre>"},{"location":"session/callbacks-middleware/#standard-implementation_2","title":"Standard Implementation","text":"<pre><code>from typing import Optional\nfrom fastapi.requests import Request\nfrom fastapi.responses import Response\nfrom starlette.middleware.base import RequestResponseEndpoint\n\n\nasync def session_middleware(\n    session_system: \"Session\", request: Request, call_next: RequestResponseEndpoint\n) -&gt; Response:\n    session_id: Optional[str] = None\n    await session_system.fetch_session_id(request)\n    if not await session_system.session_exists(request):\n        session_id = await session_system.create_session()\n\n        request.state.session_id = session_id\n\n    response: Response = await call_next(request)\n\n    if session_id:\n        response = await session_system.add_session_id(response, session_id)\n    return response\n</code></pre>"},{"location":"session/example/","title":"Example","text":"<pre><code>from typing import Optional\n\nfrom fastapi import FastAPI, Depends\nfrom fastapi.requests import Request\nfrom fastapi_framework import Session\nfrom fastapi_framework.session import fetch_session_id, generate_session_id, session_middleware\nfrom pydantic import BaseModel\n\n\nclass SessionData(BaseModel):\n    username: str\n    age: Optional[int]\n\n\napp = FastAPI()\n\nsession = Session(\n    app,  # FastAPI App\n    SessionData,  # Pydantic Model\n    SessionData(\n        username=\"test_user\",\n    ),  # Default Data\n    session_id_callback=fetch_session_id,  # Fetch Session ID Callback\n    generate_session_id_callback=generate_session_id,  # Session ID Generator\n    middleware=session_middleware,  # Session System Middleware\n    session_expire=60 * 60 * 24,  # Session Expire Time in Seconds\n)\n\n\n@app.get(\"/\")\nasync def get_data(data: SessionData = Depends(session.get_data)):\n    return data.json()\n\n\n@app.post(\"/{username}\")\nasync def update_username(request: Request, username: str, data: SessionData = Depends(session.get_data)):\n    data.username = username\n    await session.update_session(request, data)\n    return \"Updated\"\n</code></pre>"},{"location":"session/initialize/","title":"Initialize","text":"<p>You have to initialize the Session System.</p> <pre><code>from fastapi import FastAPI\nfrom fastapi_framework import Session\nfrom fastapi_framework.session import fetch_session_id, generate_session_id, session_middleware\nfrom pydantic import BaseModel\n\n\nclass SessionData(BaseModel):\n    username: str\n    age: int\n\n\napp = FastAPI()\n\nsession = Session(\n    app,  # FastAPI App\n    SessionData,  # Pydantic Model\n    SessionData(\n        username=\"test_user\",\n    ),  # Default Data\n    session_id_callback=fetch_session_id,  # Fetch Session ID Callback\n    generate_session_id_callback=generate_session_id,  # Session ID Generator\n    middleware=session_middleware,  # Session System Middleware\n    session_expire=60 * 60 * 24,  # Session Expire Time in Seconds\n)\n</code></pre>"},{"location":"session/session-data/","title":"Session Data","text":""},{"location":"session/session-data/#get-data","title":"Get Data","text":"<p>You can get the Session Data with the <code>Session.get_data</code> dependency. <pre><code>from fastapi import FastAPI, Depends\nfrom fastapi_framework import Session\nfrom fastapi_framework.session import fetch_session_id, generate_session_id, session_middleware\nfrom pydantic import BaseModel\n\n\nclass SessionData(BaseModel):\n    username: str\n    age: int\n\n\napp = FastAPI()\n\nsession = Session(\n    app,  # FastAPI App\n    SessionData,  # Pydantic Model\n    SessionData(\n        username=\"test_user\",\n    ),  # Default Data\n    session_id_callback=fetch_session_id,  # Fetch Session ID Callback\n    generate_session_id_callback=generate_session_id,  # Session ID Generator\n    middleware=session_middleware,  # Session System Middleware\n    session_expire=60 * 60 * 24,  # Session Expire Time in Seconds\n)\n\n@app.get(\"/\")\nasync def route(data: SessionData = Depends(session.get_data)):\n    return data.json()\n</code></pre></p>"},{"location":"session/session-data/#update-data","title":"Update Data","text":"<p>You can update the Session Data with <code>Session.update_session</code>. <pre><code>from fastapi import FastAPI, Depends\nfrom fastapi.requests import Request\nfrom fastapi_framework import Session\nfrom fastapi_framework.session import fetch_session_id, generate_session_id, session_middleware\nfrom pydantic import BaseModel\n\n\nclass SessionData(BaseModel):\n    username: str\n    age: int\n\n\napp = FastAPI()\n\nsession = Session(\n    app,  # FastAPI App\n    SessionData,  # Pydantic Model\n    SessionData(\n        username=\"test_user\",\n    ),  # Default Data\n    session_id_callback=fetch_session_id,  # Fetch Session ID Callback\n    generate_session_id_callback=generate_session_id,  # Session ID Generator\n    middleware=session_middleware,  # Session System Middleware\n    session_expire=60 * 60 * 24,  # Session Expire Time in Seconds\n)\n\n@app.post(\"/{value}\")\nasync def route(request: Request, value: str, data: SessionData = Depends(session.get_data)):\n    data.key = value\n    await session.update_session(request, data)\n    return \"Done\"\n</code></pre></p>"}]}